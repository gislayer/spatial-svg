Object.defineProperty(exports,"__esModule",{value:!0});let bbox_1=require("@turf/bbox");class SpatialSVG{constructor({geojson:t,styles:e,size:i,styleType:s,bgColor:r}){this.lineStringStyleProps={stroke:"stroke",strokeWidth:"stroke-width",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeOpacity:"stroke-opacity",strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset"},this.polygonStyleProps={stroke:"stroke",strokeWidth:"stroke-width",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeOpacity:"stroke-opacity",strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",fill:"fill",fillOpacity:"fill-opacity",fillRule:"fill-rule"},this.pointStyleProps={stroke:"stroke",strokeWidth:"stroke-width",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeOpacity:"stroke-opacity",strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",fill:"fill",fillOpacity:"fill-opacity",fillRule:"fill-rule",radius:"r"},this.defaultStyles={stroke:"#000000","stroke-width":1,"stroke-opacity":1,"stroke-linecap":"round","stroke-linejoin":"round",fill:"#000000","fill-opacity":1,r:5},"FeatureCollection"===t.type?this.geojson=t:this.geojson={type:"FeatureCollection",features:[t]},this.styleType=s||"global",this.styles=e,this.size=i||1e3,this.width=0,this.height=0,this.minLng=0,this.minLat=0,this.scale=0,this.bgColor=r||"none"}getTopLeftCoordinate(t){var e=[t[0],t[2]],t=[t[1],t[3]];return[Math.min(...e),Math.max(...t)]}getWidthHeightFromSize(t){var e=Math.abs(t[2]-t[0]),t=Math.abs(t[3]-t[1]),i=this.size;t<e?(this.width=i,this.height=i*t/e,this.scale=e):(this.width=i*e/t,this.height=i,this.scale=t)}getFilterStyleString(t,e){var i=t.properties||{},s=[],r=e.conditions.length;if(0===r)return[];var o,n,l=0;for(o of e.conditions){var a=!1;if(void 0!==i[o.property])switch(o.operator){case">":a=Number(i[o.property])>Number(o.value);break;case"<":a=Number(i[o.property])<Number(o.value);break;case">=":a=Number(i[o.property])>=Number(o.value);break;case"<=":a=Number(i[o.property])<=Number(o.value);break;case"==":a=i[o.property]==o.value;break;case"!=":a=i[o.property]!=o.value;break;case"in":a=o.value.includes(i[o.property]);break;case"not in":a=!o.value.includes(i[o.property]);break;case"like":a=i[o.property].includes(o.value);break;case"not like":a=!i[o.property].includes(o.value);break;case"is null":a=null===i[o.property];break;case"is not null":a=null!==i[o.property]}if(!a)break;l++}if(l===r)for(var h in e.style)switch(t.geometry.type){case"MultiLineString":case"LineString":(n=this.lineStringStyleProps[h])&&s.push(`${n}="${e.style[h]}"`);break;case"MultiPolygon":case"Polygon":(n=this.polygonStyleProps[h])&&s.push(`${n}="${e.style[h]}"`);break;case"MultiPoint":case"Point":(n=this.pointStyleProps[h])&&s.push(`${n}="${e.style[h]}"`)}return s}getStyleString(t){var e=[],i=JSON.parse(JSON.stringify(this.styles)),s={};switch(t.geometry.type){case"MultiPolygon":case"Polygon":s=this.polygonStyleProps;break;case"MultiLineString":case"LineString":s=this.lineStringStyleProps;break;case"MultiPoint":case"Point":s=this.pointStyleProps}if("global"===this.styleType)for(var r in i)s[r]&&e.push(`${s[r]}="${i[r]}"`);if("geotype"===this.styleType){if(i.Polygon&&["Polygon","MultiPolygon"].includes(t.geometry.type))for(var r in i.Polygon)this.polygonStyleProps[r]&&e.push(`${this.polygonStyleProps[r]}="${i.Polygon[r]}"`);if(i.LineString&&["LineString","MultiLineString"].includes(t.geometry.type))for(var r in i.LineString)this.lineStringStyleProps[r]&&e.push(`${this.lineStringStyleProps[r]}="${i.LineString[r]}"`);if(i.Point&&["Point","MultiPoint"].includes(t.geometry.type))for(var r in i.Point)this.pointStyleProps[r]&&e.push(`${this.pointStyleProps[r]}="${i.Point[r]}"`)}if("property"===this.styleType)for(var r in i.props){var o=s[""+r];o&&e.push(`${o}="${null==(o=null==t?void 0:t.properties)?void 0:o[i.props[r]]}"`)}if("filter"===this.styleType)for(var n of i.filters){n=this.getFilterStyleString(t,n);if(0<n.length){e=n;break}}return["LineString","MultiLineString"].includes(t.geometry.type)?(e=e.filter(t=>!t.includes("fill")).filter(t=>!t.includes('r="'))).push('fill="none"'):["Point","MultiPoint"].includes(t.geometry.type)&&0===e.filter(t=>t.includes('r="')).length&&e.push('r="5"'),e}compareStyles(t,e){var i=[];switch(t){case"LineString":case"MultiLineString":i=["stroke=","stroke-width="];break;case"Polygon":case"MultiPolygon":i=["fill="];break;case"Point":case"MultiPoint":i=["r=","fill="]}for(var s=0;s<i.length;s++){var r,o=i[s];-1==e.findIndex(t=>t.includes(o))&&(r=o.split("=")[0],e.push(`${r}="${this.defaultStyles[r]}"`))}return e}getLineString(t){var e=this.getStyleString(t);if(0===e.length)return!1;var i=t.geometry.coordinates,s=[];for(let t=0;t<i.length;t++){var r=i[t],r=[r[0]-this.minLng,this.minLat-r[1]];s.push(r)}t=s.map(t=>t[0]*this.size/this.scale+","+t[1]*this.size/this.scale).join("L");return`<g type="LineString" ${e.join(" ")}><path d="M${t}"/></g>`}getPoint(t){var e,i=t.geometry.coordinates,t=this.getStyleString(t);return 0!==t.length&&(e=t.filter(t=>t.includes('r="')),0<(t=t.filter(t=>!t.includes('r="'))).length)&&(i=[(i=[i[0]-this.minLng,this.minLat-i[1]])[0]*this.size/this.scale,i[1]*this.size/this.scale],`<g type="Point" ${t.join(" ")}><circle cx="${i[0]}" cy="${i[1]}" ${e.join(" ")}/></g>`)}getMultiPoint(t){var e=t.geometry.coordinates,t=this.getStyleString(t);if(0!==t.length){var i=t.filter(t=>t.includes('r="')),t=t.filter(t=>!t.includes('r="'));if(0<t.length){var s=[];for(let t=0;t<e.length;t++){var r=e[t],r=[r[0]-this.minLng,this.minLat-r[1]],r=[r[0]*this.size/this.scale,r[1]*this.size/this.scale];s.push(`<circle cx="${r[0]}" cy="${r[1]}" ${i.join(" ")}/>`)}return`<g type="MultiPoint" ${t.join(" ")}>${s.join(" ")}</g>`}}return!1}getMultiPolygon(t){var e=t.geometry.coordinates,t=this.getStyleString(t);if(0===t.length)return!1;var i=[];for(let t=0;t<e.length;t++){var s=e[t];for(let t=0;t<s.length;t++){var r=s[t],o=[];for(let t=0;t<r.length;t++){var n=[r[t][0]-this.minLng,this.minLat-r[t][1]];o.push(n)}var l=o.map(t=>t[0]*this.size/this.scale+","+t[1]*this.size/this.scale).join("L")+"Z";i.push(`<path d="M${l}"/>`)}}return`<g type="MultiPolygon" ${t.join(" ")}>${i.join(" ")}</g>`}getPolygon(t){var e=t.geometry.coordinates,t=this.getStyleString(t);if(0===t.length)return!1;var i=[];for(let t=0;t<e.length;t++){var s=e[t],r=[];for(let t=0;t<s.length;t++){var o=[s[t][0]-this.minLng,this.minLat-s[t][1]];r.push(o)}var n=""+r.map(t=>t[0]*this.size/this.scale+","+t[1]*this.size/this.scale).join("L");i.push(`<path d="M${n}"/>`)}return`<g type="Polygon" ${t.join(" ")}>${i.join(" ")}</g>`}getMultiLineString(t){var e=this.getStyleString(t);if(0===e.length)return!1;var i=t.geometry.coordinates,s=[];for(let t=0;t<i.length;t++){var r=i[t],o=[];for(let t=0;t<r.length;t++){var n=[r[t][0]-this.minLng,this.minLat-r[t][1]];o.push(n)}var l=""+o.map(t=>t[0]*this.size/this.scale+","+t[1]*this.size/this.scale).join("L");s.push(`<path d="M${l}"/>`)}return`<g type="MultiLineString" ${e.join(" ")}>${s.join(" ")}</g>`}runSettings(){var t=(0,bbox_1.bbox)(this.geojson),e=this.getTopLeftCoordinate(t);this.minLng=e[0],this.minLat=e[1],this.getWidthHeightFromSize(t)}getSVG(){this.runSettings();var e=[];e.push(`<!-- This SVG Generated By spatial-svg npm package : contact : ali.kilic@gislayer.com --> <svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="tiny"  viewBox="0 0 ${this.width} ${this.height}">`),"none"!==this.bgColor&&e.push(`<rect x="0" y="0" width="${this.width}" height="${this.height}" fill="${this.bgColor}" />`),e.push("<g>");for(let t=0;t<this.geojson.features.length;t++){var i,s=this.geojson.features[t];switch(s.geometry.type){case"LineString":var r=this.getLineString(s);r&&e.push(""+r);break;case"MultiLineString":r=this.getMultiLineString(s);r&&e.push(""+r);break;case"Polygon":(i=this.getPolygon(s))&&e.push(""+i);break;case"MultiPolygon":(i=this.getMultiPolygon(s))&&e.push(""+i);break;case"Point":var o=this.getPoint(s);o&&e.push(""+o);break;case"MultiPoint":o=this.getMultiPoint(s);o&&e.push(""+o)}}return e.push("</g>"),e.push("</svg>"),e.join("\n")}}exports.default=SpatialSVG;